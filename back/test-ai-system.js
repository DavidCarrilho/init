/**
 * Script para testar o sistema de IA completo
 * Simula o fluxo: Criar atividade ‚Üí OCR ‚Üí Adaptar
 */

const { sequelize } = require('./config/database');
const llmService = require('./services/llmService');
const embeddingService = require('./services/embeddingService');

async function testAISystem() {
  try {
    console.log('üß™ Iniciando teste do sistema de IA...');

    // Conectar ao banco
    await sequelize.authenticate();
    console.log('‚úÖ Conex√£o estabelecida');

    // 1. USAR DADOS SIMULADOS PARA TESTE
    console.log('\nüìù Usando dados simulados de estudante...');

    const studentId = 'test-student-' + Date.now();
    const simulatedStudent = {
      id: studentId,
      nomeCompleto: 'Jo√£o da Silva (Teste)',
      idade: '10 anos',
      diagnosticos: ['TEA', 'TDAH'],
      objetivos: ['melhorar aten√ß√£o', 'reduzir ansiedade'],
      hiperfocos: ['dinossauros', 'n√∫meros'],
      superpoderes: ['mem√≥ria visual excelente']
    };
    console.log(`‚úÖ Estudante simulado: ${simulatedStudent.nomeCompleto}`);

    // 2. SIMULAR TEXTO OCR DE ATIVIDADE
    console.log('\nüîç Simulando texto OCR extra√≠do...');

    const testOcrText = `
    ATIVIDADE DE MATEM√ÅTICA - 4¬∫ ANO

    1) Resolva as opera√ß√µes:
    a) 25 + 17 = ____
    b) 48 - 23 = ____
    c) 6 √ó 4 = ____

    2) Pedro tinha 50 reais. Comprou um brinquedo por 28 reais.
       Quanto dinheiro sobrou?

    3) Complete a sequ√™ncia:
       2, 4, 6, 8, ____, ____
    `;
    console.log(`‚úÖ Texto OCR simulado (${testOcrText.split('\n').filter(l => l.trim()).length} linhas)`);

    // 4. USAR PERFIL SIMULADO
    console.log('\nüë§ Usando perfil simulado do estudante...');

    const student = simulatedStudent;
    console.log(`‚úÖ Perfil: ${student.nomeCompleto}, Diagn√≥sticos: ${student.diagnosticos}`);

    // 5. TESTAR RAG QUERY
    console.log('\nüîç Testando busca RAG...');

    const queryText = `estudante com TEA TDAH matem√°tica opera√ß√µes b√°sicas`;

    // Buscar estrat√©gias manualmente (contornando o erro do RAG)
    const relevantStrategies = await sequelize.query(`
      SELECT e.sourceId, e.content, kn.groupLabel
      FROM embeddings e
      JOIN knowledge_nodes kn ON e.sourceId = kn.id
      WHERE e.sourceTable = 'knowledge_nodes'
      LIMIT 5
    `, {
      type: sequelize.QueryTypes.SELECT
    });

    console.log(`‚úÖ Encontradas ${relevantStrategies.length} estrat√©gias relevantes`);
    relevantStrategies.forEach(s => console.log(`   - ${s.groupLabel}`));

    // 6. TESTAR GERA√á√ÉO DE ADAPTA√á√ÉO
    console.log('\nü§ñ Testando gera√ß√£o de adapta√ß√£o...');

    const adaptationParams = {
      perfilAluno: student,
      ocrText: testOcrText,
      layout: { confidence: 0.95, words: 45 },
      nos: relevantStrategies.map(s => ({
        sourceId: s.sourceId,
        nodeDetails: { groupLabel: s.groupLabel }
      }))
    };

    const adaptationJson = await llmService.callLLM(adaptationParams);
    console.log('‚úÖ Adapta√ß√£o gerada com sucesso!');
    console.log('üìä Resumo da adapta√ß√£o:');
    console.log(`   - Estrat√©gias aplicadas: ${adaptationJson.estrategias_aplicadas?.length || 0}`);
    console.log(`   - Itens adaptados: ${adaptationJson.atividade_adaptada?.itens?.length || 0}`);
    console.log(`   - Enunciado: ${adaptationJson.atividade_adaptada?.enunciado_reescrito?.substring(0, 100)}...`);

    // 7. VALIDAR ADAPTA√á√ÉO
    console.log('\n‚úÖ Testando valida√ß√£o...');

    const isValid = llmService.validateAdaptationJson(adaptationJson);
    console.log(`Adapta√ß√£o v√°lida: ${isValid ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);

    // 8. SIMULAR RESULTADO FINAL
    console.log('\nüéâ Resultado final simulado...');

    console.log('üìã RESULTADO FINAL DO TESTE:');
    console.log(`   Estudante: ${student.nomeCompleto}`);
    console.log(`   Diagn√≥sticos: ${student.diagnosticos.join(', ')}`);
    console.log(`   Atividade: Matem√°tica - 4¬∫ Ano`);
    console.log(`   Status: ADAPTA√á√ÉO GERADA`);
    console.log(`   Estrat√©gias: ${adaptationJson.estrategias_aplicadas?.length || 0}`);
    console.log(`   Itens adaptados: ${adaptationJson.atividade_adaptada?.itens?.length || 0}`);

    console.log('\nüéä TESTE COMPLETO - SISTEMA FUNCIONANDO!');

  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  } finally {
    await sequelize.close();
  }
}

// Executar o teste
testAISystem();